import { BlendMode } from "expo-ios-ci-filters";
import type { SFSymbol } from "expo-symbols";
import type { FilterState } from "./FilterState";

export const filterGroups = [
  {
    id: "light",
    name: "Light",
    icon: "sun.max.fill" as SFSymbol,
    filters: [
      {
        id: "exposure",
        name: "Exposure",
        icon: "sun.max" as SFSymbol,
        property: "ev",
        min: -300,
        max: 300,
        default: 0,
        converter: (v: number) => v / 100,
      },
      {
        id: "colorControls",
        name: "Brightness",
        icon: "light.max" as SFSymbol,
        property: "brightness",
        min: -100,
        max: 100,
        default: 0,
        converter: (v: number) => v / 100,
      },
      {
        id: "colorControls",
        name: "Contrast",
        icon: "circle.lefthalf.filled" as SFSymbol,
        property: "contrast",
        min: -100,
        max: 100,
        default: 0,
        converter: (v: number) => (v + 100) / 100,
      },
      {
        id: "gamma",
        name: "Gamma",
        icon: "waveform" as SFSymbol,
        property: "power",
        min: 20,
        max: 300,
        default: 100,
        converter: (v: number) => v / 100,
      },
    ],
  },
  {
    id: "color",
    name: "Color",
    icon: "paintpalette.fill" as SFSymbol,
    filters: [
      {
        id: "colorControls",
        name: "Saturation",
        icon: "drop.fill" as SFSymbol,
        property: "saturation",
        min: -100,
        max: 100,
        default: 0,
        converter: (v: number) => (v + 100) / 100,
      },
      {
        id: "vibrance",
        name: "Vibrance",
        icon: "sparkles" as SFSymbol,
        property: "amount",
        min: -100,
        max: 100,
        default: 0,
        converter: (v: number) => v / 100,
      },
      {
        id: "hueAdjust",
        name: "Hue",
        icon: "circle.hexagongrid.circle.fill" as SFSymbol,
        property: "angle",
        min: -180,
        max: 180,
        default: 0,
        converter: (v: number) => (v * Math.PI) / 180,
      },
    ],
  },
  {
    id: "blur",
    name: "Blur",
    icon: "aqi.medium" as SFSymbol,
    filters: [
      {
        id: "gaussianBlur",
        name: "Gaussian",
        icon: "circle.fill" as SFSymbol,
        property: "radius",
        min: 0,
        max: 100,
        default: 0,
        converter: (v: number) => v / 2,
      },
      {
        id: "motionBlur",
        name: "Motion",
        icon: "wind" as SFSymbol,
        property: "radius",
        min: 0,
        max: 100,
        default: 0,
        converter: (v: number) => v / 2,
        secondary: {
          property: "angle",
          min: 0,
          max: 360,
          default: 0,
          converter: (v: number) => (v * Math.PI) / 180,
          name: "Angle",
        },
      },
      {
        id: "maskedVariableBlur",
        name: "Variable",
        icon: "circle.dotted" as SFSymbol,
        property: "radius",
        min: 0,
        max: 100,
        default: 0,
        converter: (v: number) => v / 2,
      },
    ],
  },
  {
    id: "effects",
    name: "Effects",
    icon: "wand.and.stars" as SFSymbol,
    filters: [
      {
        id: "sharpen",
        name: "Sharpen",
        icon: "rhombus.fill" as SFSymbol,
        property: "sharpness",
        min: 0,
        max: 100,
        default: 0,
        converter: (v: number) => v / 20,
      },
      {
        id: "vignette",
        name: "Vignette",
        icon: "circle.hexagongrid.fill" as SFSymbol,
        property: "intensity",
        min: 0,
        max: 200,
        default: 0,
        converter: (v: number) => v / 100,
        secondary: {
          property: "radius",
          min: 0,
          max: 200,
          default: 100,
          converter: (v: number) => v / 100,
          name: "Radius",
        },
      },
      {
        id: "gradientOverlay",
        name: "Gradient",
        icon: "square.fill.on.square.fill" as SFSymbol,
        property: "color0Alpha",
        min: 0,
        max: 100,
        default: 0,
        converter: (v: number) => v / 100,
        presets: [
          { name: "Soft", blendMode: BlendMode.SoftLight },
          { name: "Hard", blendMode: BlendMode.HardLight },
          { name: "Screen", blendMode: BlendMode.Screen },
          { name: "Overlay", blendMode: BlendMode.Overlay },
        ],
      },
    ],
  },
];

export const initialFilters: FilterState = {
  motionBlur: {},
  colorControls: {},
  gaussianBlur: {},
  exposure: {},
  vibrance: {},
  gamma: {},
  hueAdjust: {},
  sharpen: {},
  vignette: {},
  maskedVariableBlur: {},
  gradientOverlay: {},
};
